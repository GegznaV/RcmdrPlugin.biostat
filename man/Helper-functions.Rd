% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bs_checkboxes.R, R/bs_entry.R,
%   R/bs_radiobuttons.R, R/bs_text.R, R/bs_tk_buttonset.R,
%   R/deprecated__bs_check_boxes.R, R/deprecated__radiobuttons_horizintal.R,
%   R/generic_functions.R, R/helper-functions.R, R/set_biostat_mode.R,
%   R/tcltk__bs_combobox.R, R/tcltk__ok_cancel_help__macro.R, R/tcltk_commands.R
\name{get_values.bs_checkboxes}
\alias{get_values.bs_checkboxes}
\alias{set_values.bs_checkboxes}
\alias{values<-.bs_entry}
\alias{tclvalue<-.bs_entry}
\alias{get_values.bs_radiobuttons}
\alias{set_values.bs_radiobuttons}
\alias{bs_text}
\alias{tk_activate.bs_tk_buttonset}
\alias{tk_normalize.bs_tk_buttonset}
\alias{tk_disable.bs_tk_buttonset}
\alias{tk_get_state.bs_tk_buttonset}
\alias{bs_check_boxes}
\alias{radioButtons_horizontal}
\alias{get_size}
\alias{get_values}
\alias{set_values}
\alias{get_selection}
\alias{get_selection_length}
\alias{set_selection}
\alias{add_selection}
\alias{get_xview}
\alias{set_xview}
\alias{get_yview}
\alias{set_yview}
\alias{tk_yview_moveto}
\alias{tk_see}
\alias{tk_get_n_lines}
\alias{tk_bind_row_swap}
\alias{print.bs_tk_widget}
\alias{Helper-functions}
\alias{variables_with_unique_values}
\alias{list_summaries_Models}
\alias{run_in_rstudio}
\alias{str_glue_eval}
\alias{eval_text}
\alias{style_cmd}
\alias{try_command}
\alias{is_try_error}
\alias{function_not_implemented}
\alias{gettext_ezr}
\alias{gettext_bs}
\alias{s2u}
\alias{u2s}
\alias{spaces}
\alias{logger_error}
\alias{swap}
\alias{swap_rows}
\alias{correct_row_index}
\alias{clean_str}
\alias{get_obj_names}
\alias{unique_obj_names}
\alias{unique_df_name}
\alias{unique_file_name}
\alias{unique_colnames}
\alias{unique_colnames_2}
\alias{safe_names}
\alias{path_truncate}
\alias{show_error_messages}
\alias{is_not_valid_name}
\alias{is_empty_name}
\alias{is_not_empty_name}
\alias{variable_is_not_selected}
\alias{object_is_not_selected}
\alias{are_not_valid_names}
\alias{forbid_to_replace_variable}
\alias{forbid_to_replace_variables}
\alias{forbid_to_replace_object}
\alias{forbid_to_replace_file}
\alias{show_code_evaluation_error_message}
\alias{dataset_not_persent}
\alias{active_dataset_not_persent}
\alias{nonFactorsP}
\alias{class_ggplot_P}
\alias{list_objects_ggplot}
\alias{objects_in_env_P}
\alias{variables_with_unique_values_P}
\alias{gg_objects_exist}
\alias{gg_lastplot_exists}
\alias{is_commander_open}
\alias{rcmdr_restart_commander}
\alias{command_restart_rs_session}
\alias{command_rcmdr_close}
\alias{command_rcmdr_close_and_update_cran}
\alias{command_rcmdr_close_r}
\alias{is_console_output}
\alias{command_rcmdr_use_1_window}
\alias{command_rcmdr_use_3_windows}
\alias{command_rcmdr_set_output_mode}
\alias{print.tk2frame}
\alias{rcmdr_read_log_window}
\alias{rcmdr_read_rmd_window}
\alias{rcmdr_read_output_window}
\alias{rcmdr_read_messages_window}
\alias{is_biostat_mode}
\alias{use_relative_path}
\alias{use_absolute_path}
\alias{get_use_relative_path}
\alias{set_biostat_mode}
\alias{get_values_combobox}
\alias{set_values_combobox}
\alias{get_selection_ind_combobox}
\alias{get_selection_combobox}
\alias{get_size.combobox}
\alias{get_size.tk2combobox}
\alias{get_selection.combobox}
\alias{set_selection.combobox}
\alias{get_values.combobox}
\alias{set_values.combobox}
\alias{tk_activate.combobox}
\alias{tk_normalize.combobox}
\alias{tk_read_only.combobox}
\alias{tk_disable.combobox}
\alias{tk_get_state.combobox}
\alias{ok_cancel_help}
\alias{cursor_set_busy}
\alias{cursor_set_idle}
\alias{tk_yview.default}
\alias{tk_xview.default}
\alias{tclvalue_lgl}
\alias{tclvalue_int}
\alias{tclvalue_chr}
\title{Helper functions for RcmdrPlugin.biostat.}
\usage{
\method{get_values}{bs_checkboxes}(obj, ..., simplify = TRUE, rm_names = simplify)

\method{set_values}{bs_checkboxes}(obj, values, ...)

\method{values}{bs_entry}(x) <- value

\method{tclvalue}{bs_entry}(x) <- value

\method{get_values}{bs_radiobuttons}(obj, ...)

\method{set_values}{bs_radiobuttons}(obj, values, ...)

bs_text(parent, ..., label = "", undo = TRUE, context_menu = FALSE)

\method{tk_activate}{bs_tk_buttonset}(obj, ..., .which = NULL)

\method{tk_normalize}{bs_tk_buttonset}(obj, ..., .which = NULL)

\method{tk_disable}{bs_tk_buttonset}(obj, ..., .which = NULL)

\method{tk_get_state}{bs_tk_buttonset}(obj, ..., .out = "list")

bs_check_boxes(
  window = top,
  frame = stop("frame not supplied"),
  boxes = stop("boxes not supplied"),
  initialValues = NULL,
  labels = stop("labels not supplied"),
  title = NULL,
  ttk = FALSE,
  commands = list()
)

radioButtons_horizontal(
  window = top,
  name = stop("name not supplied"),
  buttons = stop("buttons not supplied"),
  values = NULL,
  initialValue = ..values[1],
  labels = stop("labels not supplied"),
  title = NULL,
  title.color = NULL,
  right.buttons = FALSE,
  command = function() {
 },
  sticky_title = "w",
  sticky_buttons = "e"
)

get_size(obj, ...)

get_values(obj, ...)

set_values(obj, values, ...)

get_selection(obj, ...)

get_selection_length(obj, ...)

set_selection(obj, sel, ...)

add_selection(obj, sel, ...)

get_xview(obj, ...)

set_xview(obj, ...)

get_yview(obj, ...)

set_yview(obj, ind, ...)

tk_yview_moveto(obj, ...)

tk_see(obj, ind, ...)

tk_get_n_lines(obj)

tk_bind_row_swap(obj)

\method{print}{bs_tk_widget}(x, ...)

variables_with_unique_values()

list_summaries_Models(envir = .GlobalEnv, ...)

run_in_rstudio(command, ...)

str_glue_eval(
  ...,
  envir = parent.frame(),
  .sep = "",
  .open = "{",
  .close = "}",
  envir_eval = envir,
  envir_glue = envir
)

eval_text(x, envir = parent.frame(), ...)

style_cmd(command, indent_by = 2, ...)

try_command(x)

is_try_error(obj)

function_not_implemented()

gettext_ezr(...)

gettext_bs(...)

s2u(str)

u2s(str)

spaces(n, symbol = " ")

logger_error(command = NULL, error_msg = NULL)

swap(x, i, j)

swap_rows(x, i, j)

correct_row_index(i, n_max)

clean_str(str, transliterations = "Latin-ASCII", ...)

get_obj_names(
  include_class = NULL,
  exclude_class = NULL,
  include2_class = NULL,
  all.names = TRUE,
  envir = globalenv()
)

unique_obj_names(
  names,
  prefix = "",
  suffix = "",
  list_of_choices = objects(all.names = TRUE, envir = .GlobalEnv),
  all_numbered = FALSE
)

unique_df_name(
  names = active_dataset_0(),
  prefix = "",
  suffix = "",
  list_of_choices = objects(all.names = TRUE, envir = .GlobalEnv),
  all_numbered = FALSE
)

unique_file_name(
  name = "file",
  dir = getwd(),
  list_of_choices = dir(dir, all.files = TRUE),
  all_numbered = FALSE
)

unique_colnames(
  names = "",
  prefix = "",
  suffix = "",
  list_of_choices = listVariables(),
  all_numbered = FALSE
)

unique_colnames_2(
  names = "",
  prefix = "",
  suffix = "",
  list_of_choices = listVariables(),
  all_numbered = TRUE
)

safe_names(str)

path_truncate(path, max_length = 30)

show_error_messages(
  message,
  popup_msg = message,
  title = "Error",
  parent = CommanderWindow()
)

is_not_valid_name(name, parent = CommanderWindow())

is_empty_name(name, which_name = "name", parent = CommanderWindow())

is_not_empty_name(
  name,
  which_name = "name",
  parent = CommanderWindow(),
  article = "a"
)

variable_is_not_selected(
  obj,
  obj_type = "variable",
  parent = CommanderWindow(),
  article = "a"
)

object_is_not_selected(
  obj,
  obj_type = "object",
  parent = CommanderWindow(),
  article = "an"
)

are_not_valid_names(name, parent = CommanderWindow())

forbid_to_replace_variable(name, parent = CommanderWindow())

forbid_to_replace_variables(name, parent = CommanderWindow())

forbid_to_replace_object(name, envir = .GlobalEnv, parent = CommanderWindow())

forbid_to_replace_file(name, parent = CommanderWindow())

show_code_evaluation_error_message(
  parent = CommanderWindow(),
  add_msg = "",
  add_note = ""
)

dataset_not_persent(parent = CommanderWindow())

active_dataset_not_persent(parent = CommanderWindow())

nonFactorsP(n = 1)

class_ggplot_P(n = 1)

list_objects_ggplot(envir = .GlobalEnv)

objects_in_env_P(n = 1, envir = .GlobalEnv, ...)

variables_with_unique_values_P(n = 1)

gg_objects_exist(n = 1)

gg_lastplot_exists()

is_commander_open()

rcmdr_restart_commander()

command_restart_rs_session()

command_rcmdr_close()

command_rcmdr_close_and_update_cran()

command_rcmdr_close_r()

is_console_output()

command_rcmdr_use_1_window()

command_rcmdr_use_3_windows()

command_rcmdr_set_output_mode(console.output = NULL)

\method{print}{tk2frame}(x, ...)

rcmdr_read_log_window()

rcmdr_read_rmd_window()

rcmdr_read_rmd_window()

rcmdr_read_output_window()

rcmdr_read_messages_window()

is_biostat_mode()

use_relative_path()

use_absolute_path()

get_use_relative_path()

set_biostat_mode()

get_values_combobox(combobox)

set_values_combobox(combobox, values, ...)

get_selection_ind_combobox(combobox)

get_selection_combobox(combobox)

\method{get_size}{combobox}(obj, ...)

\method{get_size}{tk2combobox}(obj, ...)

\method{get_selection}{combobox}(obj, ...)

\method{set_selection}{combobox}(obj, sel, ...)

\method{get_values}{combobox}(obj, ...)

\method{set_values}{combobox}(obj, values, ...)

\method{tk_activate}{combobox}(obj, ...)

\method{tk_normalize}{combobox}(obj, ...)

\method{tk_read_only}{combobox}(obj, ...)

\method{tk_disable}{combobox}(obj, ...)

\method{tk_get_state}{combobox}(obj, ...)

ok_cancel_help(
  window = top,
  helpSubject = NULL,
  model = FALSE,
  reset = NULL,
  apply = NULL,
  helpPackage = NULL,
  on_help = NULL,
  close_on_ok = FALSE,
  reset_location = FALSE,
  sticky = "w",
  ok_label = "OK",
  apply_label = "Apply",
  reset_label = "Reset",
  after_apply_fun = do_nothing,
  after_apply_success_fun = do_nothing,
  before_cancel_fun = do_nothing
)

cursor_set_busy(frame = NULL)

cursor_set_idle(frame = NULL)

tk_yview.default(obj, ind, ...)

tk_xview.default(obj, ind, ...)

tclvalue_lgl(x)

tclvalue_int(x)

tclvalue_chr(x, trim = TRUE, ...)
}
\arguments{
\item{...}{\code{tclvalue_chr()} passes these parameters to \code{\link[base:trimws]{base::trimws()}}.}

\item{frame}{Tcl/Tk frame object.}

\item{str}{sring}

\item{trim}{(logical) If \code{TRUE}, function \code{\link[base:trimws]{base::trimws()}} will be applied.}
}
\description{
Helper functions for package \pkg{RcmdrPlugin.biostat}.
}
\keyword{internal}
